/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { Counter, CounterInterface } from "../Counter";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "firstNumElements",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getNum",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSlicedLoremIpsum",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastNumElements",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "loremIpsum",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "num",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newNum",
        type: "uint256",
      },
    ],
    name: "setNum",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "transferFundsToOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60056101c0818152644c6f72656d60d81b6101e052608090815261020082815264697073756d60d81b6102205260a052610240918252643237b637b960d91b6102605260c0919091526003610280818152621cda5d60ea1b6102a05260e05260046102c081815263185b595d60e21b6102e05261010052600b6103009081526a31b7b739b2b1ba32ba3ab960a91b6103205261012052600a6103408181526961646970697363696e6760b01b610360526101405261038091825263195b1a5d60e21b6103a052610160919091526103c0918252621cd95960ea1b6103e05261018091909152610440604052600261040081815261646f60f01b610420526101a0526200010d92909162000198565b503480156200011b57600080fd5b5073b6c7be25b152e795732c2425a4709b47bacc129a6200013c8162000148565b506000600155620003e0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054828255906000526020600020908101928215620001e3579160200282015b82811115620001e35782518290620001d2908262000314565b5091602001919060010190620001b9565b50620001f1929150620001f5565b5090565b80821115620001f15760006200020c828262000216565b50600101620001f5565b508054620002249062000285565b6000825580601f1062000235575050565b601f01602090049060005260206000209081019062000255919062000258565b50565b5b80821115620001f1576000815560010162000259565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200029a57607f821691505b602082108103620002bb57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200030f57600081815260208120601f850160051c81016020861015620002ea5750805b601f850160051c820191505b818110156200030b57828155600101620002f6565b5050505b505050565b81516001600160401b038111156200033057620003306200026f565b620003488162000341845462000285565b84620002c1565b602080601f831160018114620003805760008415620003675750858301515b600019600386901b1c1916600185901b1785556200030b565b600085815260208120601f198616915b82811015620003b15788860151825594840194600190910190840162000390565b5085821015620003d05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61094280620003f06000396000f3fe60806040526004361061009c5760003560e01c80638da5cb5b116100645780638da5cb5b1461013c578063cd16ecbf14610164578063d3b8687f14610184578063ec8af07d14610199578063f2fde38b146101ae578063fb84b062146101ce57600080fd5b8063254b7b76146100a15780634e70b1dc146100d757806365b0bc55146100fb57806367e0badb14610110578063715018a614610125575b600080fd5b3480156100ad57600080fd5b506100c16100bc366004610760565b6101d6565b6040516100ce91906107bf565b60405180910390f35b3480156100e357600080fd5b506100ed60015481565b6040519081526020016100ce565b610103610282565b6040516100ce91906107d9565b34801561011c57600080fd5b506001546100ed565b34801561013157600080fd5b5061013a610445565b005b34801561014857600080fd5b506000546040516001600160a01b0390911681526020016100ce565b34801561017057600080fd5b5061013a61017f366004610760565b610459565b34801561019057600080fd5b50610103610466565b3480156101a557600080fd5b5061013a6105b6565b3480156101ba57600080fd5b5061013a6101c936600461083b565b610649565b610103610687565b600281815481106101e657600080fd5b90600052602060002001600091509050805461020190610864565b80601f016020809104026020016040519081016040528092919081815260200182805461022d90610864565b801561027a5780601f1061024f5761010080835404028352916020019161027a565b820191906000526020600020905b81548152906001019060200180831161025d57829003601f168201915b505050505081565b606066071afd498d00003410156102d65760405162461bcd60e51b815260206004820152601360248201527224b739bab33334b1b4b2b73a10333ab732399760691b60448201526064015b60405180910390fd5b60025460015411156102e757600080fd5b6001546002546000916102f9916108ae565b67ffffffffffffffff811115610311576103116108c7565b60405190808252806020026020018201604052801561034457816020015b606081526020019060019003908161032f5790505b506001549091506000905b60025481101561043d576002818154811061036c5761036c6108dd565b90600052602060002001805461038190610864565b80601f01602080910402602001604051908101604052809291908181526020018280546103ad90610864565b80156103fa5780601f106103cf576101008083540402835291602001916103fa565b820191906000526020600020905b8154815290600101906020018083116103dd57829003601f168201915b5050505050838381518110610411576104116108dd565b60200260200101819052508180610427906108f3565b9250508080610435906108f3565b91505061034f565b509092915050565b61044d6106e3565b6104576000610710565b565b6104616106e3565b600155565b600254600154606091101561047a57600080fd5b600060015467ffffffffffffffff811115610497576104976108c7565b6040519080825280602002602001820160405280156104ca57816020015b60608152602001906001900390816104b55790505b50905060005b6001548110156105b057600281815481106104ed576104ed6108dd565b90600052602060002001805461050290610864565b80601f016020809104026020016040519081016040528092919081815260200182805461052e90610864565b801561057b5780601f106105505761010080835404028352916020019161057b565b820191906000526020600020905b81548152906001019060200180831161055e57829003601f168201915b5050505050828281518110610592576105926108dd565b602002602001018190525080806105a8906108f3565b9150506104d0565b50919050565b6105be6106e3565b478061060c5760405162461bcd60e51b815260206004820152601860248201527f436f6e747261637420686173206e6f2062616c616e63652e000000000000000060448201526064016102cd565b600080546040516001600160a01b039091169183156108fc02918491818181858888f19350505050158015610645573d6000803e3d6000fd5b5050565b6106516106e3565b6001600160a01b03811661067b57604051631e4fbdf760e01b8152600060048201526024016102cd565b61068481610710565b50565b606066038d7ea4c680003410156106d65760405162461bcd60e51b815260206004820152601360248201527224b739bab33334b1b4b2b73a10333ab732399760691b60448201526064016102cd565b6106de610466565b905090565b6000546001600160a01b031633146104575760405163118cdaa760e01b81523360048201526024016102cd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561077257600080fd5b5035919050565b6000815180845260005b8181101561079f57602081850181015186830182015201610783565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006107d26020830184610779565b9392505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561082e57603f1988860301845261081c858351610779565b94509285019290850190600101610800565b5092979650505050505050565b60006020828403121561084d57600080fd5b81356001600160a01b03811681146107d257600080fd5b600181811c9082168061087857607f821691505b6020821081036105b057634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156108c1576108c1610898565b92915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006001820161090557610905610898565b506001019056fea2646970667358221220f11f378073fbb9eb4fffb5b745e44ec7333a3ed28a5b136bf2616ff99a1edf8a64736f6c63430008150033";

type CounterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CounterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Counter__factory extends ContractFactory {
  constructor(...args: CounterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Counter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Counter__factory {
    return super.connect(runner) as Counter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CounterInterface {
    return new Interface(_abi) as CounterInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Counter {
    return new Contract(address, _abi, runner) as unknown as Counter;
  }
}
